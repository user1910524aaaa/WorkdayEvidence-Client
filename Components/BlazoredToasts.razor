
@inject IToastService _toast;

@if (ToastList.Any())
{
    <div class="toast-container @PositionClass">
        <CascadingValue Value=this>
            @foreach (var toast in ToastList.OrderBy(x => x.TimeStamp))
            {
                <BlazoredToast ToastSettings="toast.ToastSettings" ToastId="toast.Id" />
            }
        </CascadingValue>
    </div>
}

@code {

    [Parameter] public string InfoClass { get; set; }

    [Parameter] public string InfoIconClass { get; set; }

    [Parameter] public string SuccessClass { get; set; }

    [Parameter] public string SuccessIconClass { get; set; }

    [Parameter] public string WarningClass { get; set; }

    [Parameter] public string WarningIconClass { get; set; }

    [Parameter] public string ErrorClass { get; set; }

    [Parameter] public string ErrorIconClass { get; set; }

    [Parameter] public Client.Data.ToastPosition Position { get; set; } = Client.Data.ToastPosition.TopRight;

    [Parameter] public int Timeout { get; set; } = 40;

    private string PositionClass { get; set; } = string.Empty;

    internal List<Client.Data.ToastInstance> ToastList { get; set; } = new List<Client.Data.ToastInstance>();

    protected override void OnInitialized()
    {
        _toast.OnShow += ShowToast;
        PositionClass = $"position-{Position.ToString().ToLower()}";
    }

    public void RemoveToast(Guid toastId)
    {
        InvokeAsync(() =>
        {
            var toastInstance = ToastList.SingleOrDefault(x => x.Id == toastId);
            ToastList.Remove(toastInstance);
            StateHasChanged();
        });
    }

    private Client.Data.ToastSettings BuildToastSettings(ToastLevel level, string message, string heading)
    {
        switch (level)
        {
            case ToastLevel.Info:
                return new Client.Data.ToastSettings(string.IsNullOrWhiteSpace(heading) ? "Info" : heading, message, "toast-info", InfoClass, InfoIconClass);

            case ToastLevel.Success:
                return new Client.Data.ToastSettings(string.IsNullOrWhiteSpace(heading) ? "Success" : heading, message, "toast-success", SuccessClass, SuccessIconClass);

            case ToastLevel.Warning:
                return new Client.Data.ToastSettings(string.IsNullOrWhiteSpace(heading) ? "Warning" : heading, message, "toast-warning", WarningClass, WarningIconClass);

            case ToastLevel.Error:
                return new Client.Data.ToastSettings(string.IsNullOrWhiteSpace(heading) ? "Error" : heading, message, "toast-error", ErrorClass, ErrorIconClass);
        }

        throw new InvalidOperationException();
    }

    private void ShowToast(ToastLevel level, string message, string heading)
    {
        InvokeAsync(() =>
        {
            var toastSettings = BuildToastSettings(level, message, heading);
            var toastInstance = new Client.Data.ToastInstance
            {
                Id = Guid.NewGuid(),
                TimeStamp = DateTime.Now,
                ToastSettings = toastSettings
            };

            ToastList.Add(toastInstance);

            int timeout = Timeout * 200;
            var toastTimer = new System.Timers.Timer(timeout);

            toastTimer.Elapsed += (sender, args) => { RemoveToast(toastInstance.Id); };
            toastTimer.AutoReset = false;
            toastTimer.Start();

            StateHasChanged();
        });
    }
}
